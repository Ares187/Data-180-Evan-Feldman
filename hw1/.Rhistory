# Install library
install.packages("readxl")
library("MASS")
library("MASS")
#Call library
library("readxl")
#Call library
library("readxl")
read_excel("particulate data.xlsx") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Dickinson College Teaching\DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Dickinson College Teaching\DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Dickinson College Teaching\DATA 180")
"C:\Users\evanf\OneDrive\Desktop\Data 180 Evan\Data-180-Evan-Feldman\particulate data.csv"
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:/Dickinson College Teaching/DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:/Dickinson College Teaching/DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Dickinson College Teaching\DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Dickinson College Teaching/DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:/Dickinson College Teaching/DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Dickinson College Teaching\DATA 180")
# Install library
install.packages("readxl")
#Call library
library("readxl")
library("MASS")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Dickinson College Teaching\DATA 180")
#2.
# READ DIRECTLY FROM THE FOLDER
p_data<-read_excel("D:/Dickinson College Teaching/DATA 180/particulate data.xlsx")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\C:\Users\evanf\OneDrive\Desktop\Data 180 Evan\Data-180-Evan-Feldman\DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Users\evanf\OneDrive\Desktop\Data 180 Evan\Data-180-Evan-Feldman\DATA 180")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\Data-180-Evan-Feldman\DATA 180")
read_excel("particulate data.xlsx") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
read_excel("particulate data.xls") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\"C:\Users\evanf\OneDrive\Desktop\Data 180 Evan\Data-180-Evan-Feldman\particulate data.csv")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("D:\C:\Users\evanf\OneDrive\Desktop\Data 180 Evan\Data-180-Evan-Feldman\particulate data.csv")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("C:\Users\evanf\OneDrive\Desktop\Data 180 Evan\Data-180-Evan-Feldman\particulate data.csv")
read_excel("particulate data.xlsx") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
read_excel("particulate data.csv") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
function_name
function_name
function_name
# A function that returns the circumference of a circle given its radius
circumference <- function(r){
2*pi*r
}
function_name
# A function that always prints your name
my_name <- function(){
'Kennedy Odongo'
}
function_name <- function(parameters){
#Do something here
}
function_name
print(circumference(2))
---
title: "HW 1"
---
title: "HW 1"
'''{r}
print("hello")
'''
'''{r}
print(`hello`)
'''
'''{r}
person <- c("Alice", "Bob", "Charlie", "Denise", "Erin", "Frank", "Gisele", "Harry")
Preference <- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
my_df <- data.frame(person, preference)
print (my_df)
'''
person <- c("Alice", "Bob", "Charlie", "Denise", "Erin", "Frank", "Gisele", "Harry")
Preference <- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
my_df <- data.frame(person, preference)
Person <- c("Alice", "Bob", "Charlie", "Denise", "Erin", "Frank", "Gisele", "Harry")
Preference <- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
my_df <- data.frame(Person, Preference)
print (my_df)
print (my_df(,1))
print (my_df (,1))
Person <- c("Alice", "Bob", "Charlie", "Denise", "Erin", "Frank", "Gisele", "Harry")
Preference <- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
my_df <- data.frame(Person, Preference)
print (my_df)
# B.
# 8 rows, 2 columns
# C.
print (my_df (,1))
Person <- c("Alice", "Bob", "Charlie", "Denise", "Erin", "Frank", "Gisele", "Harry")
Preference <- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
my_df <- data.frame(Person, Preference)
print (my_df)
# B.
# 8 rows, 2 columns
# C.
print (my_df)
print (my_df[,1])
print num(my_df[,1])
print nrow(my_df[,1])
c <- nrow(my_df[,1])
print (c)
c <- nrow(my_df)
print (c)
print (c)
my_dfT <- my_df[my_df$preference == "Twitter"]
print nrow(my_dfT)
my_dfT <- my_df[my_df$preference == "Twitter"]
print (nrow(my_dfT))
print (nrow(my_dfT))
my_dfT
my_dfT <- my_df[my_df$preference == "Twitter",]
print (nrow(my_dfT))
my_dfT <- my_df[my_df$preference == "Twitter",]
print (nrow(my_dfT))
my_df
my_dfT <- my_df[my_df$Preference == "Twitter",]
print (nrow(my_dfT))
my_dfG <- my_df[my_df$Person == "Gisele",]
print (my_dfG)
my_dfG <- my_df[my_df$Person == "Gisele",]
print (my_dfG[0,1])
my_dfG <- my_df[my_df$Person == "Gisele",]
print (my_dfG[,1])
my_dfG <- my_df[my_df$Person == "Gisele",]
print (my_dfG[1,])
my_dfG <- my_df[my_df$Person == "Gisele",]
print (my_dfG[,2])
my_vec <- c(1-10)
print (my_vec)
my_vec <- c(1,2,3,4,5,6,7,8,9,10)
print (my_vec)
replace(my_vec, 2, 99)
my_func <- if {
my_func <- if my_vec[x]{
my_func <- if my_vec[x]{
my_func <- if my_vec(x){
my_func <- my_vec(x){
my_func <- my_vec(x) {
}
}
my_func(4)
my_func (4)
my_func(my_vec,4)
my_func(my_vec,4)
my_func <- function(my_vec,x) {
if (my_vec[x] > 5) { print ("This element is greater than 5!") }
elif (my_vec[x] <= 5) { print ("This element is NOT greater than 5!") }
my_func(my_vec,4)
my_func <- function(my_vec,x) {
if (my_vec[x] > 5) { print ("This element is greater than 5!") }
else if (my_vec[x] <= 5) { print ("This element is NOT greater than 5!") }
}
my_func <- function(my_vec,x) {
if (my_vec[x] > 5) { print ("This element is greater than 5!") }
else if (my_vec[x] <= 5) { print ("This element is NOT greater than 5!") }
}
my_func(my_vec,4)
my_func(my_vec,2)
my_func(my_vec,9)
